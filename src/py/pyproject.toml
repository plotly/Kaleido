[build-system]
requires = ["setuptools>=65.0.0", "wheel", "setuptools-git-versioning"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages]
find = {namespaces = false}

[tool.setuptools-git-versioning]
enabled = true

[tool.setuptools.package-data]
kaleido = ['vendor/*', 'vendor/**']

[project]
name = "kaleido"
description = "Plotly graph export library"
license = {file = "LICENSE.md"}
readme = "README.md"
requires-python = ">=3.8"
dynamic = ["version"]
authors = [
  {name = "Andrew Pikul", email="ajpikul@gmail.com"},
  {name = "Neyberson Atencio", email="neyberatencio@gmail.com"}
  ]
maintainers = [
  {name = "Andrew Pikul", email = "ajpikul@gmail.com"},
]
dependencies = [
  "choreographer>=1.0.3",
  "logistro>=1.0.8",
  "orjson>=3.10.15",
]

[project.urls]
Homepage = "https://github.com/plotly/kaleido"
Repository = "https://github.com/plotly/kaleido"

[project.scripts]
kaleido_mocker = "kaleido._mocker:build_mocks"
kaleido_get_chrome = "choreographer.cli._cli_utils:get_chrome_cli"

[dependency-groups]
dev = [
  "pytest",
  "pytest-asyncio",
  "pytest-xdist",
  "async-timeout",
  "mypy>=1.14.1",
  "poethepoet>=0.30.0",
  "plotly>=6.0.0",
]

#docs = [
#    "mkquixote @ git+ssh://git@github.com/geopozo/mkquixote; python_version>= '3.11'",
#    "mkdocs>=1.6.1",
#    "mkdocs-material>=9.5.49",
#]

[tool.uv.sources]
#mkquixote = { path = "../../../mkquixote", editable = true }
#choreographer = { path = "../../../devtools_protocol", editable = true }
#logistro = { path = "../../../logistro", editable = true }

[tool.ruff.lint]
select = ["ALL"]
ignore = [
          "ANN", # no types
          "EM", # allow strings in raise(), despite python being ugly about it
          "TRY003", # allow long error messages inside raise()
          "D203", # No blank before class docstring (D211 = require blank line)
          "D212", # Commit message style docstring is D213, ignore D212
          "COM812", # manual says linter rule conflicts with formatter
          "ISC001", # manual says litner rule conflicts with formatter
          "RET504", # Allow else if unnecessary because more readable
          "RET505", # Allow else if unnecessary because more readable
          "RET506", # Allow else if unnecessary because more readable
          "RET507", # Allow else if unnecessary because more readable
          "RET508", # Allow else if unnecessary because more readable
          "RUF012", # We don't do typing, so no typing
          "SIM105", # Too opionated (try-except-pass)
          "PT003", # scope="function" implied but I like readability
          "G004", # fstrings in my logs
          ]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
              "D", # ignore docstring errors
              "S101", # allow assert
              "INP001", # no need for __init__ in test directories
              "T201", # if we're printing in tests, there is a reason
              "ERA001"
            ]

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
log_cli = false

[tool.poe.tasks]
# name = cmd

[tool.poe.tasks.test]
cmd = "pytest --log-level=1 -W error -n auto -v -rfE --capture=fd"
help = "Run all tests quickly"

[tool.poe.tasks.debug-test]
# sequence = ["some_named_command"]
cmd = "pytest --log-level=1 -W error -vvvx -rA --show-capture=no --capture=no"
help = "Run test by test, slowly, quitting after first error"

[tool.poe.tasks.filter-test]
cmd = "pytest --log-level=1 -W error -vvvx -rA --capture=no --show-capture=no"
help = "Run any/all tests one by one with basic settings: can include filename and -k filters"
