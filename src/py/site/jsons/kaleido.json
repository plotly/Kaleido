{"object":{"name":"kaleido","full_path":"kaleido","docstring":"Kaleido is a library for generating static images from Plotly figures.\n\nPlease see the README.md for more information and a quickstart.","docstring_first":"Kaleido is a library for generating static images from Plotly figures.","docstring_rest":"Please see the README.md for more information and a quickstart.","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":true,"kind":"module","modules":[],"attributes":[],"functions":[{"name":"calc_fig","full_path":"kaleido.calc_fig","docstring":"Return binary for plotly figure.\n\nA convenience wrapper for `Kaleido.calc_fig()` which starts a `Kaleido` and\nexecutes the `calc_fig()`.\nIt takes an additional argument, `kopts`, a dictionary of arguments to pass\nto the kaleido process. See the `kaleido.Kaleido` docs. However,\n`calc_fig()` will never use more than one processor, so any `n` value will\nbe overridden.\n\n\nSee documentation for `Kaleido.calc_fig()`.","docstring_first":"Return binary for plotly figure.","docstring_rest":"A convenience wrapper for `Kaleido.calc_fig()` which starts a `Kaleido` and\nexecutes the `calc_fig()`.\nIt takes an additional argument, `kopts`, a dictionary of arguments to pass\nto the kaleido process. See the `kaleido.Kaleido` docs. However,\n`calc_fig()` will never use more than one processor, so any `n` value will\nbe overridden.\n\n\nSee documentation for `Kaleido.calc_fig()`.","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"function","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":["fig","path","opts","topojson","kopts"],"package_modules":[]},{"name":"write_fig","full_path":"kaleido.write_fig","docstring":"Write a plotly figure(s) to a file.\n\nA convenience wrapper for `Kaleido.write_fig()` which starts a `Kaleido` and\nexecutes the `write_fig()`.\nIt takes an additional argument, `kopts`, a dictionary of arguments to pass\nto the kaleido process. See the `kaleido.Kaleido` docs.\n\n\nSee documentation for `Kaleido.write_fig()` for the other arguments.","docstring_first":"Write a plotly figure(s) to a file.","docstring_rest":"A convenience wrapper for `Kaleido.write_fig()` which starts a `Kaleido` and\nexecutes the `write_fig()`.\nIt takes an additional argument, `kopts`, a dictionary of arguments to pass\nto the kaleido process. See the `kaleido.Kaleido` docs.\n\n\nSee documentation for `Kaleido.write_fig()` for the other arguments.","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"function","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":["fig","path","opts","topojson","error_log","profiler","kopts"],"package_modules":[]},{"name":"write_fig_from_object","full_path":"kaleido.write_fig_from_object","docstring":"Write a plotly figure(s) to a file.\n\nA convenience wrapper for `Kaleido.write_fig_from_object()` which starts a\n`Kaleido` and executes the `write_fig_from_object()`\nIt takes an additional argument, `kopts`, a dictionary of arguments to pass\nto the kaleido process. See the `kaleido.Kaleido` docs.\n\nSee documentation for `Kaleido.write_fig_from_object()` for the other\narguments.","docstring_first":"Write a plotly figure(s) to a file.","docstring_rest":"A convenience wrapper for `Kaleido.write_fig_from_object()` which starts a\n`Kaleido` and executes the `write_fig_from_object()`\nIt takes an additional argument, `kopts`, a dictionary of arguments to pass\nto the kaleido process. See the `kaleido.Kaleido` docs.\n\nSee documentation for `Kaleido.write_fig_from_object()` for the other\narguments.","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"function","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":["generator","error_log","profiler","kopts"],"package_modules":[]},{"name":"calc_fig_sync","full_path":"kaleido.calc_fig_sync","docstring":"Call `calc_fig` but blocking.","docstring_first":"Call `calc_fig` but blocking.","docstring_rest":"","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"function","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":["args","kwargs"],"package_modules":[]},{"name":"write_fig_sync","full_path":"kaleido.write_fig_sync","docstring":"Call `write_fig` but blocking.","docstring_first":"Call `write_fig` but blocking.","docstring_rest":"","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"function","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":["args","kwargs"],"package_modules":[]},{"name":"write_fig_from_object_sync","full_path":"kaleido.write_fig_from_object_sync","docstring":"Call `write_fig_from_object` but blocking.","docstring_first":"Call `write_fig_from_object` but blocking.","docstring_rest":"","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"function","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":["args","kwargs"],"package_modules":[]}],"classes":[{"name":"PageGenerator","full_path":"kaleido._page_generator.PageGenerator","docstring":"A page generator can set the versions of the js libraries used to render.\n\nIt does this by outputting the HTML used to render the plotly figures.","docstring_first":"A page generator can set the versions of the js libraries used to render.","docstring_rest":"It does this by outputting the HTML used to render the plotly figures.","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":true,"alias_name":"PageGenerator","alias_path":"kaleido.PageGenerator","is_package":false,"kind":"class","modules":[],"attributes":[{"name":"header","full_path":"kaleido._page_generator.PageGenerator.header","docstring":"The header is the HTML that always goes at the top. Rarely needs changing.","docstring_first":"The header is the HTML that always goes at the top. Rarely needs changing.","docstring_rest":"","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"attribute","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":"","package_modules":[]},{"name":"footer","full_path":"kaleido._page_generator.PageGenerator.footer","docstring":"The footer is the HTML that always goes on the bottom. Rarely needs changing.","docstring_first":"The footer is the HTML that always goes on the bottom. Rarely needs changing.","docstring_rest":"","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"attribute","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":"","package_modules":[]}],"functions":[{"name":"__init__","full_path":"kaleido._page_generator.PageGenerator.__init__","docstring":"Create a PageGenerator.\n","docstring_first":"Create a PageGenerator.","docstring_rest":"","docstring_args":{"plotly":" the url to the plotly script to use. The default is the one\nplotly.py is using, if not installed, it uses the constant declared.","mathjax":" the url to the mathjax script. By default is constant above.\nCan be set to false to turn off.","others":" a list of other script urls to include. Usually strings, but can be\n(str, str) where its (url, encoding).","force_cdn":" (default False) Don't use plotly import, use CDN"},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"function","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":["self","plotly","mathjax","others","force_cdn"],"package_modules":[]},{"name":"generate_index","full_path":"kaleido._page_generator.PageGenerator.generate_index","docstring":"Generate the page.\n","docstring_first":"Generate the page.","docstring_rest":"","docstring_args":{"path":" If specified, page is written to path. Otherwise it is returned."},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"function","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":["self","path"],"package_modules":[]}],"classes":[],"bases":[],"args":"","package_modules":[]},{"name":"Kaleido","full_path":"kaleido.kaleido.Kaleido","docstring":"Kaleido manages a set of image processors.\n\nIt can be used as a context (`async with Kaleido(...)`), but can\nalso be used like:\n\n```\nk = Kaleido(...)\nk = await Kaleido.open()\n... # do stuff\nk.close()\n```","docstring_first":"Kaleido manages a set of image processors.","docstring_rest":"It can be used as a context (`async with Kaleido(...)`), but can\nalso be used like:\n\n```\nk = Kaleido(...)\nk = await Kaleido.open()\n... # do stuff\nk.close()\n```","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":true,"alias_name":"Kaleido","alias_path":"kaleido.Kaleido","is_package":false,"kind":"class","modules":[],"attributes":[],"functions":[{"name":"__init__","full_path":"kaleido.kaleido.Kaleido.__init__","docstring":"Initialize Kaleido, a `choreo.Browser` wrapper adding kaleido functionality.\n\nIt takes all `choreo.Browser` args, plus some extra. The extra\nare listed, see choreographer for more documentation.\n\nNote: Chrome will throttle background tabs and windows, so non-headless\nmulti-process configurations don't work well.\n\nFor argument `page`, if it is a string, it must be passed as a fully-qualified\nURI, like `file://` or `https://`.\nIf it is a `Path`, `Path`'s `as_uri()` will be called.\nIf it is a string or path, its expected to be an HTML file, one will not\nbe generated.\n","docstring_first":"Initialize Kaleido, a `choreo.Browser` wrapper adding kaleido functionality.","docstring_rest":"It takes all `choreo.Browser` args, plus some extra. The extra\nare listed, see choreographer for more documentation.\n\nNote: Chrome will throttle background tabs and windows, so non-headless\nmulti-process configurations don't work well.\n\nFor argument `page`, if it is a string, it must be passed as a fully-qualified\nURI, like `file://` or `https://`.\nIf it is a `Path`, `Path`'s `as_uri()` will be called.\nIf it is a string or path, its expected to be an HTML file, one will not\nbe generated.","docstring_args":{"n":" the number of separate processes (windows, not seen) to use.","timeout":" limit on any single render (default 90 seconds).","width":" width of window (headless only)","height":" height of window (headless only)","page":" This can be a `kaleido.PageGenerator`, a `pathlib.Path`, or a string."},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"function","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":["self","args","kwargs"],"package_modules":[]},{"name":"close","full_path":"kaleido.kaleido.Kaleido.close","docstring":"Close the browser.","docstring_first":"Close the browser.","docstring_rest":"","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"function","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":["self"],"package_modules":[]},{"name":"populate_targets","full_path":"kaleido.kaleido.Kaleido.populate_targets","docstring":"Override the browser populate_targets to ensure the correct page.\n\nIs called automatically during initialization, and should only be called\nonce ever per object.","docstring_first":"Override the browser populate_targets to ensure the correct page.","docstring_rest":"Is called automatically during initialization, and should only be called\nonce ever per object.","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"function","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":["self"],"package_modules":[]},{"name":"calc_fig","full_path":"kaleido.kaleido.Kaleido.calc_fig","docstring":"Calculate the bytes for a figure.\n\nThis function does not support parallelism or multi-image processing like\n`write_fig` does, although its arguments are a subset of those of `write_fig`.\nThis function is currently just meant to bridge the old and new API.","docstring_first":"Calculate the bytes for a figure.","docstring_rest":"This function does not support parallelism or multi-image processing like\n`write_fig` does, although its arguments are a subset of those of `write_fig`.\nThis function is currently just meant to bridge the old and new API.","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"function","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":["self","fig","path","opts","topojson"],"package_modules":[]},{"name":"write_fig","full_path":"kaleido.kaleido.Kaleido.write_fig","docstring":"Call the plotly renderer via javascript on first available tab.\n","docstring_first":"Call the plotly renderer via javascript on first available tab.","docstring_rest":"","docstring_args":{"fig":" the plotly figure or an iterable of plotly figures","path":" the path to write the images to. if its a directory, we will try to\ngenerate a name. If the path contains an extension,\n\"path/to/my_image.png\", that extension will be the format used if not\noverridden in `opts`. If you pass a complete path (filename), for\nmultiple figures, you will overwrite every previous figure.","opts":" dictionary describing format, width, height, and scale of image","topojson":" a link ??? TODO","error_log":" a supplied list, will be populated with `ErrorEntry`s\nwhich can be converted to strings. Note, this is for\ncollections errors that have to do with plotly. They will\nnot be thrown. Lower level errors (kaleido, choreographer)\nwill still be thrown. If not passed, all errors raise.","profiler":" a supplied dictionary to collect stats about the operation\nabout tabs, runtimes, etc."},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"function","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":["self","fig","path","opts","topojson","error_log","profiler"],"package_modules":[]},{"name":"write_fig_from_object","full_path":"kaleido.kaleido.Kaleido.write_fig_from_object","docstring":"Equal to `write_fig` but allows the user to generate all arguments.\n\nGenerator must yield dictionaries with keys:\n- fig: the plotly figure\n- path: (optional, string or pathlib.Path) the path\n- opts: (optional) dictionary with:\n    - format (string)\n    - scale (number)\n    - height (number)\n    - and width (number)\n- topojson: (optional) topojsons are used to customize choropleths\n\nGenerators are good because, if rendering many images, one doesn't need to\nprerender them all. They can be rendered and yielded asynchronously.\n\nWhile `write_fig` can also take generators, but only for the figure.\nIn this case, the generator will specify all render-related arguments.\n","docstring_first":"Equal to `write_fig` but allows the user to generate all arguments.","docstring_rest":"Generator must yield dictionaries with keys:\n- fig: the plotly figure\n- path: (optional, string or pathlib.Path) the path\n- opts: (optional) dictionary with:\n    - format (string)\n    - scale (number)\n    - height (number)\n    - and width (number)\n- topojson: (optional) topojsons are used to customize choropleths\n\nGenerators are good because, if rendering many images, one doesn't need to\nprerender them all. They can be rendered and yielded asynchronously.\n\nWhile `write_fig` can also take generators, but only for the figure.\nIn this case, the generator will specify all render-related arguments.","docstring_args":{"generator":" an iterable or generator which supplies a dictionary\nof arguments to pass to tab.write_fig.","error_log":" A supplied list, will be populated with `ErrorEntry`s\nwhich can be converted to strings. Note, this is for\ncollections errors that have to do with plotly. They will\nnot be thrown. Lower level errors (kaleido, choreographer)\nwill still be thrown.","profiler":" A supplied dictionary, will be populated with information\nabout tabs, runtimes, etc."},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"function","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":["self","generator","error_log","profiler"],"package_modules":[]}],"classes":[],"bases":["choreographer.Browser"],"args":"","package_modules":[]}],"bases":[],"args":"","package_modules":[{"name":"kaleido","full_path":"kaleido.kaleido","docstring":"the kaleido module kaleido.py provides the main classes for the kaleido package.","docstring_first":"the kaleido module kaleido.py provides the main classes for the kaleido package.","docstring_rest":"","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"module","modules":[],"attributes":[],"functions":[],"classes":[{"name":"Kaleido","full_path":"kaleido.kaleido.Kaleido","docstring":"Kaleido manages a set of image processors.\n\nIt can be used as a context (`async with Kaleido(...)`), but can\nalso be used like:\n\n```\nk = Kaleido(...)\nk = await Kaleido.open()\n... # do stuff\nk.close()\n```","docstring_first":"Kaleido manages a set of image processors.","docstring_rest":"It can be used as a context (`async with Kaleido(...)`), but can\nalso be used like:\n\n```\nk = Kaleido(...)\nk = await Kaleido.open()\n... # do stuff\nk.close()\n```","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"class","modules":[],"attributes":[],"functions":[{"name":"__init__","full_path":"kaleido.kaleido.Kaleido.__init__","docstring":"Initialize Kaleido, a `choreo.Browser` wrapper adding kaleido functionality.\n\nIt takes all `choreo.Browser` args, plus some extra. The extra\nare listed, see choreographer for more documentation.\n\nNote: Chrome will throttle background tabs and windows, so non-headless\nmulti-process configurations don't work well.\n\nFor argument `page`, if it is a string, it must be passed as a fully-qualified\nURI, like `file://` or `https://`.\nIf it is a `Path`, `Path`'s `as_uri()` will be called.\nIf it is a string or path, its expected to be an HTML file, one will not\nbe generated.\n","docstring_first":"Initialize Kaleido, a `choreo.Browser` wrapper adding kaleido functionality.","docstring_rest":"It takes all `choreo.Browser` args, plus some extra. The extra\nare listed, see choreographer for more documentation.\n\nNote: Chrome will throttle background tabs and windows, so non-headless\nmulti-process configurations don't work well.\n\nFor argument `page`, if it is a string, it must be passed as a fully-qualified\nURI, like `file://` or `https://`.\nIf it is a `Path`, `Path`'s `as_uri()` will be called.\nIf it is a string or path, its expected to be an HTML file, one will not\nbe generated.","docstring_args":{"n":" the number of separate processes (windows, not seen) to use.","timeout":" limit on any single render (default 90 seconds).","width":" width of window (headless only)","height":" height of window (headless only)","page":" This can be a `kaleido.PageGenerator`, a `pathlib.Path`, or a string."},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"function","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":["self","args","kwargs"],"package_modules":[]},{"name":"close","full_path":"kaleido.kaleido.Kaleido.close","docstring":"Close the browser.","docstring_first":"Close the browser.","docstring_rest":"","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"function","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":["self"],"package_modules":[]},{"name":"populate_targets","full_path":"kaleido.kaleido.Kaleido.populate_targets","docstring":"Override the browser populate_targets to ensure the correct page.\n\nIs called automatically during initialization, and should only be called\nonce ever per object.","docstring_first":"Override the browser populate_targets to ensure the correct page.","docstring_rest":"Is called automatically during initialization, and should only be called\nonce ever per object.","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"function","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":["self"],"package_modules":[]},{"name":"calc_fig","full_path":"kaleido.kaleido.Kaleido.calc_fig","docstring":"Calculate the bytes for a figure.\n\nThis function does not support parallelism or multi-image processing like\n`write_fig` does, although its arguments are a subset of those of `write_fig`.\nThis function is currently just meant to bridge the old and new API.","docstring_first":"Calculate the bytes for a figure.","docstring_rest":"This function does not support parallelism or multi-image processing like\n`write_fig` does, although its arguments are a subset of those of `write_fig`.\nThis function is currently just meant to bridge the old and new API.","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"function","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":["self","fig","path","opts","topojson"],"package_modules":[]},{"name":"write_fig","full_path":"kaleido.kaleido.Kaleido.write_fig","docstring":"Call the plotly renderer via javascript on first available tab.\n","docstring_first":"Call the plotly renderer via javascript on first available tab.","docstring_rest":"","docstring_args":{"fig":" the plotly figure or an iterable of plotly figures","path":" the path to write the images to. if its a directory, we will try to\ngenerate a name. If the path contains an extension,\n\"path/to/my_image.png\", that extension will be the format used if not\noverridden in `opts`. If you pass a complete path (filename), for\nmultiple figures, you will overwrite every previous figure.","opts":" dictionary describing format, width, height, and scale of image","topojson":" a link ??? TODO","error_log":" a supplied list, will be populated with `ErrorEntry`s\nwhich can be converted to strings. Note, this is for\ncollections errors that have to do with plotly. They will\nnot be thrown. Lower level errors (kaleido, choreographer)\nwill still be thrown. If not passed, all errors raise.","profiler":" a supplied dictionary to collect stats about the operation\nabout tabs, runtimes, etc."},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"function","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":["self","fig","path","opts","topojson","error_log","profiler"],"package_modules":[]},{"name":"write_fig_from_object","full_path":"kaleido.kaleido.Kaleido.write_fig_from_object","docstring":"Equal to `write_fig` but allows the user to generate all arguments.\n\nGenerator must yield dictionaries with keys:\n- fig: the plotly figure\n- path: (optional, string or pathlib.Path) the path\n- opts: (optional) dictionary with:\n    - format (string)\n    - scale (number)\n    - height (number)\n    - and width (number)\n- topojson: (optional) topojsons are used to customize choropleths\n\nGenerators are good because, if rendering many images, one doesn't need to\nprerender them all. They can be rendered and yielded asynchronously.\n\nWhile `write_fig` can also take generators, but only for the figure.\nIn this case, the generator will specify all render-related arguments.\n","docstring_first":"Equal to `write_fig` but allows the user to generate all arguments.","docstring_rest":"Generator must yield dictionaries with keys:\n- fig: the plotly figure\n- path: (optional, string or pathlib.Path) the path\n- opts: (optional) dictionary with:\n    - format (string)\n    - scale (number)\n    - height (number)\n    - and width (number)\n- topojson: (optional) topojsons are used to customize choropleths\n\nGenerators are good because, if rendering many images, one doesn't need to\nprerender them all. They can be rendered and yielded asynchronously.\n\nWhile `write_fig` can also take generators, but only for the figure.\nIn this case, the generator will specify all render-related arguments.","docstring_args":{"generator":" an iterable or generator which supplies a dictionary\nof arguments to pass to tab.write_fig.","error_log":" A supplied list, will be populated with `ErrorEntry`s\nwhich can be converted to strings. Note, this is for\ncollections errors that have to do with plotly. They will\nnot be thrown. Lower level errors (kaleido, choreographer)\nwill still be thrown.","profiler":" A supplied dictionary, will be populated with information\nabout tabs, runtimes, etc."},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"function","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":["self","generator","error_log","profiler"],"package_modules":[]}],"classes":[],"bases":["choreographer.Browser"],"args":"","package_modules":[]}],"bases":[],"args":"","package_modules":[]},{"name":"errors","full_path":"kaleido.errors","docstring":"A list of errors available from the kaleido package.","docstring_first":"A list of errors available from the kaleido package.","docstring_rest":"","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"module","modules":[],"attributes":[],"functions":[],"classes":[{"name":"JavascriptError","full_path":"kaleido._kaleido_tab.JavascriptError","docstring":"Used to report errors from javascript.","docstring_first":"Used to report errors from javascript.","docstring_rest":"","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":true,"alias_name":"JavascriptError","alias_path":"kaleido.errors.JavascriptError","is_package":false,"kind":"class","modules":[],"attributes":[],"functions":[],"classes":[],"bases":["RuntimeError"],"args":"","package_modules":[]},{"name":"KaleidoError","full_path":"kaleido._kaleido_tab.KaleidoError","docstring":"An error to interpret errors from Kaleido's JS side.","docstring_first":"An error to interpret errors from Kaleido's JS side.","docstring_rest":"","docstring_args":{},"docstring_returns":"","docstring_raises":{},"is_alias":true,"alias_name":"KaleidoError","alias_path":"kaleido.errors.KaleidoError","is_package":false,"kind":"class","modules":[],"attributes":[],"functions":[{"name":"__init__","full_path":"kaleido._kaleido_tab.KaleidoError.__init__","docstring":"Construct an error object.\n","docstring_first":"Construct an error object.","docstring_rest":"","docstring_args":{"code":" the number code of the error.","message":" the message of the error."},"docstring_returns":"","docstring_raises":{},"is_alias":false,"alias_name":"","alias_path":"","is_package":false,"kind":"function","modules":[],"attributes":[],"functions":[],"classes":[],"bases":[],"args":["self","code","message"],"package_modules":[]}],"classes":[],"bases":["Exception"],"args":"","package_modules":[]}],"bases":[],"args":"","package_modules":[]}]},"hash":-2249440107728013553}